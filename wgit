#!/usr/bin/env python3
from pathlib import Path
import ssh_agent_setup
from pygments import lexers, formatters, highlight
import subprocess
import argparse
import giturlparse
import json
import sys
import re
import os

VERSION = '0.0.2'
HOME = str(Path.home())
EXAMPLES = """examples:
  wgit clone git@github.com:ericsonj/wgit.git
  wgit [normal git command continuation]
  wgit ! -g
  wgit ! -g "gitkraken -p ."
"""


class GitEnv:

    def __init__(self, env: dict = os.environ.copy()) -> None:
        self.env = env
        self.git_env = {}

    def set_git_env_var(self, key, value):
        self.git_env[key] = value

    def print_export(self):
        for key, value in self.git_env.items():
            print(f"export {key}=\"{value}\";")

    def get_env(self) -> dict:
        for key, value in self.git_env.items():
            self.env[key] = value
        return self.env


class GitConfig:

    def __init__(self, file: str) -> None:
        self.file = file
        self.configs = self.parse_git_config(self.file)

    def parse_git_config(file):
        resp = {}
        groupname = ""
        for line in open(file, 'r'):
            res = re.search("^\[(?P<groupname>[a-zA-Z0-9]+)[ ]?.*\]", line)
            if res:
                groupname = res.group('groupname')
            else:
                res = re.search(
                    "(?P<key>[\w@\.-_]+)[ ]?=[ ]?[\"]?(?P<value>[\w@\.-_ ]+)[\"]?", line)
                if res:
                    resp[f"{groupname}.{res.group('key')}"] = res.group(
                        'value')
        return resp

    def get_config_by_key(self, key: str):
        return self.configs[key]


class WGit:

    WRAPPER_KEY = '!'
    GIT_CMD = 'git'
    CLONE_CMD = 'clone'
    HOME = str(Path.home())
    WGIT_ACCOUNTS_FILE = f"{HOME}/.config/wgit/accounts.json"

    def __init__(self, argv) -> None:
        self.argv = argv
        self.env: GitEnv = GitEnv()
        self.git_url = None
        self.account = None

    def _getKeyMatched(self, test, lst: list):
        if test in lst:
            return test
        else:
            for l in lst:
                if re.match(l, test):
                    return l
        return None

    def _get_repo_origin_info(self):
        printOutput =  self.WRAPPER_KEY in self.argv
        try:
            origin = subprocess.check_output(
                ['git', 'remote', 'get-url', 'origin']).decode('utf-8')
            return origin
        except Exception as e:
            raise Exception("unable to get origin url")

    def _get_account_by_host_owner(self, key_host_owner):
        accounts_dict = {}
        try:
            with open(self.WGIT_ACCOUNTS_FILE, 'r') as file:
                accounts = json.load(file)
                if not isinstance(accounts, list):
                    return None
                for account in accounts:
                    if 'host_owners' in account and isinstance(account['host_owners'], list):
                        for host_owner in account['host_owners']:
                            accounts_dict[host_owner] = account
        except FileNotFoundError:
            print(f"wgit: ðŸš¨ Accounts file not found, create the file {self.WGIT_ACCOUNTS_FILE}")
            print(f"wgit:    You can use the template https://github.com/ericsonj/wgit/blob/main/accounts.temp.json")
        except Exception as e:
            raise e

        key = self._getKeyMatched(key_host_owner, list(accounts_dict.keys()))
        return None if not key else accounts_dict[key]

    def _init_git_env(self, url_obj: giturlparse.GitUrlParsed, account=None):
        try:
            if account:
                ssh_command = account['GIT_SSH_COMMAND'] if 'GIT_SSH_COMMAND' in account else None
                if not ssh_command and not url_obj:
                    indentity_file = account['IdentityFile'] if 'IdentityFile' in account else " ~/.ssh/id_rsa"
                    self.env.set_git_env_var(
                        'GIT_SSH_COMMAND',  f"ssh -o UpdateHostKeys=no -i {indentity_file} -F /dev/null")
                elif not ssh_command and url_obj:
                    user = account['User'] if 'User' in account else url_obj.user
                    hostname = account['HostName'] if 'HostName' in account else url_obj.host
                    indentity_file = account['IdentityFile'] if 'IdentityFile' in account else " ~/.ssh/id_rsa"
                    self.env.set_git_env_var(
                        'GIT_SSH_COMMAND', f"ssh -o User={user} -o Hostname={hostname} -o UpdateHostKeys=no -i {indentity_file} -F /dev/null")
                elif ssh_command:
                    self.env.set_git_env_var('GIT_SSH_COMMAND', ssh_command)

                if 'author' in account:
                    self.env.set_git_env_var(
                        'GIT_AUTHOR_NAME', account['author'])
                    self.env.set_git_env_var(
                        'GIT_COMMITTER_NAME', account['author'])

                if 'email' in account:
                    self.env.set_git_env_var(
                        'GIT_AUTHOR_EMAIL', account['email'])
                    self.env.set_git_env_var(
                        'GIT_COMMITTER_EMAIL', account['email'])

                if 'name' in account:
                    self.env.set_git_env_var(
                        'WGIT_ACCOUNT_NAME', account['name'])

                for key, value in account.items():
                    if str(key).startswith('GIT_'):
                        self.env.set_git_env_var(key, value)
            elif url_obj:
                self.env.set_git_env_var(
                    'GIT_SSH_COMMAND', f"ssh -o User=git -o Hostname={url_obj.host} -o UpdateHostKeys=no -i ~/.ssh/id_{url_obj.platform}_{url_obj.owner} -F /dev/null")
        except:
            raise Exception('Error in loading environment variables')

    def process_wrap_cmd(self):

        parser = argparse.ArgumentParser(description="""Wrapper of GIT command for handle multi-accounts of git multi-platforms. Use this command for control wgit.""",
                                         prog=f"wgit {self.WRAPPER_KEY}",
                                         epilog=EXAMPLES,
                                         formatter_class=argparse.RawDescriptionHelpFormatter)
        parser.add_argument(
            "-v", "--version",
            help="wgit version",
            action="store_true"
        )
        parser.add_argument(
            "-l",
            "--list",
            help=f"show accounts from {self.WGIT_ACCOUNTS_FILE}",
            action="store_true"
        )
        parser.add_argument(
            "-e", 
            "--env",
            help=f"print environment of current repository",
            action="store_true"
        )
        parser.add_argument(
            "-g",
            "--gui",
            nargs='?',
            help=f"open git GUI client (default: gitg) or try: wgit ! -g \"gitkraken -p .\"",
            const="gitg",
            type=str
        )

        parser.add_argument(
            "git_commad",
            nargs='?',
            help="continue git command, ex: wgit ! status"
        )

        args = parser.parse_args(sys.argv.remove(self.WRAPPER_KEY))

        if args.version:
            print(f"v{VERSION}")
        elif args.list:
            with open(self.WGIT_ACCOUNTS_FILE, 'r') as file:
                accounts = json.load(file)
                colorful_json = highlight(
                    json.dumps(accounts, indent=2, sort_keys=True),
                    lexers.JsonLexer(),
                    formatters.Terminal256Formatter())
                print(colorful_json)
        elif args.env:
            self.env.print_export()
        elif args.gui:
            ssh_agent_setup.setup()
            if 'GIT_SSH_COMMAND' in self.env.git_env:
                ssh_command = self.env.git_env['GIT_SSH_COMMAND']
                identity_file = re.search('(?P<identity_file>-i[ |=]?[a-zA-Z/~\._-]+)', ssh_command).group('identity_file')
                identity_file = identity_file.replace('-i', '').replace('~', HOME).strip()
                ssh_agent_setup.addKey(identity_file)
                self.env.env = os.environ.copy()
            subprocess.call(args.gui.split(), env=self.env.get_env())
        else:
           print("Hi!, try: wgit ! -h")

        if args.git_commad:
            subprocess.call(['git'] + args.git_commad.split(), env=self.env.get_env())

    def process_git_cmd(self):
        cmd = [self.GIT_CMD]
        cmd = cmd + (self.argv[1:])
        subprocess.call(cmd, env=self.env.get_env())

    def process(self):
        try:
            if self.CLONE_CMD in self.argv:
                self.git_url = self.argv[self.argv.index(self.CLONE_CMD) + 1]
            else:
                self.git_url = self._get_repo_origin_info()
            self.git_url = giturlparse.parse(self.git_url)
            self.account = self._get_account_by_host_owner(f"{self.git_url.platform}_{self.git_url.owner}")
            self._init_git_env(self.git_url, self.account)     
        except Exception as e:
            raise e

        if self.WRAPPER_KEY in self.argv:
            self.process_wrap_cmd()
        else:
            self.process_git_cmd()


if __name__ == "__main__":
    try:
        WGit(sys.argv).process()
    except Exception as e:
        print('wgit:', e)
