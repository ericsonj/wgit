#!/usr/bin/env python3
import subprocess
import giturlparse
import sys
import os
import json
from pathlib import Path
import re
import ssh_agent_setup

GUI_CLIENTS = [
    'gitkraken',
    'gitg',
    'tig'
]

HOME = str(Path.home())
WIG_CONFIG_FOLDER = f"{HOME}/.config/wit/"

def get_repo_origin_info():
    try:
        if Path('.git').exists():
            origin = subprocess.check_output(['git', 'config', '--get', 'remote.origin.url']).decode('utf-8')
            return origin
    except:
        pass
    return None


def get_config_file(url_obj: giturlparse.GitUrlParsed):
    support_config_files = [
        f"{WIG_CONFIG_FOLDER}{url_obj.platform}_{url_obj.owner}.json",
        f"{WIG_CONFIG_FOLDER}{url_obj.platform}.json"
    ]
    for config in support_config_files:
        config_path = Path(config)
        if config_path.exists():
            return config_path
    return None


def get_git_env_config(url_obj: giturlparse.GitUrlParsed):
    config_file = get_config_file(url_obj)
    env_config = {}
    try:
        if config_file:
            with open(config_file, 'r') as file:
                json_dict = json.load(file)
                ssh_command = json_dict['GIT_SSH_COMMAND'] if 'GIT_SSH_COMMAND' in json_dict else None
                if not ssh_command:
                    user = json_dict['User'] if 'User' in json_dict else url_obj.user
                    hostname = json_dict['HostName'] if 'HostName' in json_dict else url_obj.host
                    indentity_file = json_dict['IdentityFile'] if 'IdentityFile' in json_dict else " ~/.ssh/id_rsa"
                    env_config['GIT_SSH_COMMAND'] = f"ssh -o User={user} -o Hostname={hostname} -o UpdateHostKeys=no -i {indentity_file} -F /dev/null"
                else:
                    env_config['GIT_SSH_COMMAND'] = ssh_command
                if 'author' in json_dict:
                    env_config['GIT_AUTHOR_NAME'] = json_dict['author']
                if 'email' in json_dict:
                    env_config['GIT_AUTHOR_EMAIL'] = json_dict['email']
                for key, value in json_dict.items():
                    if str(key).startswith('GIT_'):
                        env_config[key] = value
        else:
            env_config['GIT_SSH_COMMAND'] = f"ssh -o User=git -o Hostname={url_obj.host} -o UpdateHostKeys=no -i ~/.ssh/id_{url_obj.platform}_{url_obj.owner} -F /dev/null"
    except Exception as e:
        env_config['GIT_SSH_COMMAND'] = f"ssh -o User=git -o Hostname={url_obj.host} -o UpdateHostKeys=no -i ~/.ssh/id_{url_obj.platform}_{url_obj.owner} -F /dev/null"
    return env_config

url = None
url_obj = None
args = sys.argv[1:]
env_config = None

try:
    cloneIdx = args.index("clone")
    url = args[cloneIdx + 1] 
except:
    url = get_repo_origin_info()

try:
    url_obj = giturlparse.parse(url)
    env_config = get_git_env_config(url_obj)
except:
    pass


gui_tool = None

if sys.argv[1] in GUI_CLIENTS:
    gui_tool = sys.argv[1]


if gui_tool:
    ssh_agent_setup.setup()
    ssh_command = env_config['GIT_SSH_COMMAND']
    identity_file = re.search('(?P<identity_file>-i[ |=]?[a-zA-Z/~\._-]+)', ssh_command).group('identity_file')
    identity_file = identity_file.replace('-i', '').replace('~', HOME).strip()
    ssh_agent_setup.addKey(identity_file)

_env = os.environ.copy()
if env_config:
    for key, value in env_config.items():
        print(f"{key}={value}")
        _env[key] = value

if gui_tool:
    print(_env)
    cmd = [gui_tool]
    cmd = cmd + (sys.argv[2:])
    out = subprocess.call(cmd, env=_env)
else:
    cmd = ['git']
    cmd = cmd + (sys.argv[1:])
    out = subprocess.call(cmd, env=_env)